A01:2021 – Broken Access Control

Access Control – Säkerhetspolicy
Principen om minsta privilegium eller nekad åtkomst som standard (deny by default).
Det betyder att åtkomst endast ska beviljas för specifika funktioner, roller eller användare.

Access Control – Praktisk beskrivning
Åtkomstkontroll (Access Control) upprätthåller säkerhetspolicyn så att användare inte kan agera utanför sina avsedda behörigheter.

Beskrivning Broken Access Control (kortfattat)
Bristfällig åtkomstkontroll innebär att användare kan komma åt data eller funktioner som de inte borde ha tillgång till.

Vanligaexempel – Broken Access Control
    • Överträdelse av principen om minsta privilegium eller deny by default
    All data och funktioner är tillgängliga för alla.
    • Kringgående av åtkomstkontroll genom att modifiera URL:er (parameter tampering, force browsing), interna applikationstillstånd, HTML-sidan eller genom att använda attackverktyg som manipulerar API-förfrågningar.

I praktiken:
    • Force browsing: Angriparen försöker få åtkomst till kataloger, filer eller andra resurser som inte ska vara publikt tillgängliga.
    • Internal application state: Refererar till data och variabler inom applikationen som spårar nuvarande tillstånd och användarspecifik information.
    • API request: Ett samtal mellan klienten och servern för att komma åt, modifiera eller interagera med resurser. Det är i praktiken ett sätt för olika mjukvarukomponenter att kommunicera. Klienten specificerar vad den behöver; servern bearbetar förfrågan och skickar tillbaka ett svar.

    • IDOR (Insecure Direct Object References)
Tillåta visning eller redigering av någon annans konto genom att ange dess unika identifierare.
IDOR uppstår när en applikation exponerar interna objektidentifierare (t.ex. databasnycklar eller filsökvägar) för användare utan korrekta åtkomstkontroller. Detta kan möjliggöra obehörig åtkomst eller manipulation av data, såsom andra användares information eller filer.

    • API utan åtkomstkontroller för POST, PUT och DELETE
I praktiken:
API:et låter vem som helst skicka ändrande eller destruktiva förfrågningar utan att kontrollera behörighet.
    • POST (skapa data): En obehörig användare kan skapa nya användarkonton eller poster i databasen.
    • PUT (uppdatera data): En angripare kan ändra andras information, t.ex. byta lösenord eller adresser.
    • DELETE (ta bort data): Någon kan radera poster eller filer, exempelvis andra användares konton eller uppladdade dokument.

    • Privilegieförhöjning (Privilege Escalation)
Agera som en användare utan att vara inloggad, eller agera som administratör trots att man endast är inloggad som vanlig användare.

    • Metadata-manipulation
Exempelvis att återanvända eller manipulera en JWT-token, cookie eller dolt fält för att höja behörigheter eller missbruka brister i JWT-ogiltigförklaring.
Praktiska exempel:
    • Replay-attack: En angripare fångar upp en giltig JWT-token eller cookie och skickar den igen för åtkomst, även om den inte längre borde vara giltig (t.ex. efter utloggning).
    • Token-manipulation: Om en JWT är dåligt signerad eller använder svag kryptering kan angriparen ändra innehållet (t.ex. "role": "user" → "role": "admin") för att få högre behörighet.
    • Manipulerade dolda fält: Ett formulärfält som isAdmin=false kan ändras till isAdmin=true. Om det inte kontrolleras på serversidan kan angriparen få administratörsrättigheter.
    • JWT-invalidation abuse: Om systemet inte hanterar utloggning eller ogiltigförklaring korrekt kan en angripare fortsätta använda en token även efter att användaren loggat ut eller bytt lösenord.

    • CORS-miskonfiguration
Detta kan tillåta API-åtkomst från obehöriga eller otillförlitliga ursprung.
I praktiken:
En felaktig CORS-inställning gör att API:et accepterar förfrågningar från webbplatser som inte borde ha åtkomst. Detta gör att obehöriga webbplatser kan kommunicera direkt med API:t via offrets webbläsare, vilket kan leda till dataläckage eller kontokapning.
CORS (Cross-Origin Resource Sharing):
En säkerhetsmekanism i webbläsare som styr hur en webbsida får göra förfrågningar till resurser (t.ex. API:er) på en annan domän.
    • Exempel: Du besöker https://minbank.se som använder ett API på https://api.minbank.se.
CORS-regeln måste uttryckligen tillåta förfrågningar från https://minbank.se.
Om en helt annan sida (https://hacker.com) försöker anropa API:t ska detta blockeras av webbläsaren.

    • Force browsing (tvingad navigering)
Försök att direkt nå autentiserade sidor som en oinloggad användare eller privilegierade sidor som en standardanvändare.
Exempel:
En sida som https://systemet.se/admin/dashboard ska endast vara tillgänglig för administratörer.
En vanlig användare eller helt oinloggad besökare skriver in URL:en manuellt. Om serversidans åtkomstkontroller är bristfälliga kan användaren ändå komma åt sidan.

Hur man förebygger
Åtkomstkontroll är endast effektiv i betrodd server-side-kod eller serverlösa API:er, där angriparen inte kan ändra åtkomstkontroller eller metadata.
    • Förutom publika resurser: neka som standard (deny by default).
    • Implementera åtkomstkontrollmekanismer en gång och återanvänd dem i hela applikationen, inklusive att minimera användningen av CORS.
    • Åtkomstkontroller bör säkerställa ägarskap av poster i stället för att tillåta att användaren kan skapa, läsa, uppdatera eller ta bort vilken post som helst.
    • Unika affärsbegränsningar bör upprätthållas av domänmodeller.
    • Inaktivera kataloglistning på webbservern och säkerställ att filmetadata (t.ex. .git) och backupfiler inte finns i webbroten.
    • Logga åtkomstkontrollfel och larma administratörer när det är lämpligt (t.ex. vid upprepade misslyckanden).
    • Begränsa API- och controller-åtkomsthastighet (rate limiting) för att minimera skada från automatiserade attacker.
    • Stateful sessions-ID:n bör ogiltigförklaras på serversidan efter utloggning. Stateless JWT-tokens bör vara kortlivade för att minimera angriparens tidsfönster. För långlivade JWT-tokens bör OAuth-standarder användas för att kunna återkalla åtkomst.
    • Utvecklare och QA-personal bör inkludera funktionella åtkomstkontrolltester samt enhets- och integrationstester.

List of Mapped CWEs

CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')

CWE-23 Relative Path Traversal

CWE-35 Path Traversal: '.../...//'

CWE-59 Improper Link Resolution Before File Access ('Link Following')

CWE-200 Exposure of Sensitive Information to an Unauthorized Actor

CWE-201 Exposure of Sensitive Information Through Sent Data

CWE-219 Storage of File with Sensitive Data Under Web Root

CWE-264 Permissions, Privileges, and Access Controls (should no longer be used)

CWE-275 Permission Issues

CWE-276 Incorrect Default Permissions

CWE-284 Improper Access Control

CWE-285 Improper Authorization

CWE-352 Cross-Site Request Forgery (CSRF)

CWE-359 Exposure of Private Personal Information to an Unauthorized Actor

CWE-377 Insecure Temporary File

CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak')

CWE-425 Direct Request ('Forced Browsing')

CWE-441 Unintended Proxy or Intermediary ('Confused Deputy')

CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere

CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory

CWE-540 Inclusion of Sensitive Information in Source Code

CWE-548 Exposure of Information Through Directory Listing

CWE-552 Files or Directories Accessible to External Parties

CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key

CWE-601 URL Redirection to Untrusted Site ('Open Redirect')

CWE-639 Authorization Bypass Through User-Controlled Key

CWE-651 Exposure of WSDL File Containing Sensitive Information

CWE-668 Exposure of Resource to Wrong Sphere

CWE-706 Use of Incorrectly-Resolved Name or Reference

CWE-862 Missing Authorization

CWE-863 Incorrect Authorization

CWE-913 Improper Control of Dynamically-Managed Code Resources

CWE-922 Insecure Storage of Sensitive Information

CWE-1275 Sensitive Cookie with Improper SameSite Attribute

